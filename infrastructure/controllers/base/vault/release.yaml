apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: vault
  namespace: vault
spec:
  interval: 30m
  chart:
    spec:
      chart: "vault"
      version: "0.30.0"
      sourceRef:
        kind: HelmRepository
        name: vault
        namespace: vault
      interval: 12h
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  values:
    global:
      enabled: true
      tlsDisable: false
      serverTelemetry:
        prometheusOperator: true


    injector:
      enabled: false
   
    serverTelemetry:
      serviceMonitor:
        enabled: true
        interval: 30s
        scrapeTimeout: 10s
        tlsConfig:
          insecureSkipVerify: true
        selectors:
          app.kubernetes.io/component: monitoring

    server:
      statefulSet:
        securityContext:
          pod:
            runAsNonRoot: true
            runAsUser: 100
            runAsGroup: 1000
            fsGroup: 1000
          container:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      affinity: null
      serviceAccount:
        create: true
        name: vault
        serviceDiscovery:
          enabled: true
      ingress:
        enabled: false
        ingressClassName: traefik

      image:
        repository: "hashicorp/vault"
        tag: "1.16.1"

      readinessProbe:
        enabled: true
        path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
      livenessProbe:
        enabled: true
        path: "/v1/sys/health?standbyok=true"
        initialDelaySeconds: 60

  
      extraEnvironmentVars:
        AWS_REGION: eu-west-3
        VAULT_SEAL_TYPE: "awskms"
        VAULT_AWSKMS_SEAL_KEY_ID: "7bfdde74-57d0-4382-88aa-2cef282369cb"
        VAULT_CACERT: /vault/userconfig/vault-internal-tls-secret/ca.crt

      extraSecretEnvironmentVars:
        - envName: AWS_ACCESS_KEY_ID
          secretName: eks-creds
          secretKey: AWS_ACCESS_KEY_ID
        - envName: AWS_SECRET_ACCESS_KEY
          secretName: eks-creds
          secretKey: AWS_SECRET_ACCESS_KEY

      extraVolumes:
        - type: secret
          name: vault-internal-tls-secret
    
      dataStorage:
        enabled: true
      auditStorage:
        enabled: true

      standalone:
        enabled: false

      

      ha:
        enabled: true
        replicas: 5
        apiAddr: "https://vault.undefinedlab.uk:8200"
        raft:
          enabled: true
          setNodeId: true
          config: |
            ui = true
            cluster_name = "vault-integrated-storage"
            listener "tcp" {
              address = "[::]:8200"
              cluster_address = "[::]:8201"
              tls_cert_file = "/vault/userconfig/vault-internal-tls-secret/tls.crt"
              tls_key_file = "/vault/userconfig/vault-internal-tls-secret/tls.key"

              telemetry {
                unauthenticated_metrics_access = "true"
              }
            }

            telemetry {
              prometheus_retention_time = "30s"
              disable_hostname = true
            }

            storage "raft" {
              path = "/vault/data"
              retry_join {
                leader_api_addr = "https://vault-0.vault-internal:8200"
                leader_ca_cert_file = "/vault/userconfig/vault-internal-tls-secret/ca.crt"
                leader_client_cert_file = "/vault/userconfig/vault-internal-tls-secret/tls.crt"
                leader_client_key_file = "/vault/userconfig/vault-internal-tls-secret/tls.key"
              }
              retry_join {
                leader_api_addr = "https://vault-1.vault-internal:8200"
                leader_ca_cert_file = "/vault/userconfig/vault-internal-tls-secret/ca.crt"
                leader_client_cert_file = "/vault/userconfig/vault-internal-tls-secret/tls.crt"
                leader_client_key_file = "/vault/userconfig/vault-internal-tls-secret/tls.key"
              }
              retry_join {
                leader_api_addr = "https://vault-2.vault-internal:8200"
                leader_ca_cert_file = "/vault/userconfig/vault-internal-tls-secret/ca.crt"
                leader_client_cert_file = "/vault/userconfig/vault-internal-tls-secret/tls.crt"
                leader_client_key_file = "/vault/userconfig/vault-internal-tls-secret/tls.key"
              }
              retry_join {
                leader_api_addr = "https://vault-3.vault-internal:8200"
                leader_ca_cert_file = "/vault/userconfig/vault-internal-tls-secret/ca.crt"
                leader_client_cert_file = "/vault/userconfig/vault-internal-tls-secret/tls.crt"
                leader_client_key_file = "/vault/userconfig/vault-internal-tls-secret/tls.key"
              }
              retry_join {
                leader_api_addr = "https://vault-4.vault-internal:8200"
                leader_ca_cert_file = "/vault/userconfig/vault-internal-tls-secret/ca.crt"
                leader_client_cert_file = "/vault/userconfig/vault-internal-tls-secret/tls.crt"
                leader_client_key_file = "/vault/userconfig/vault-internal-tls-secret/tls.key"
              }
            }

            service_registration "kubernetes" {}
        active:
          enabled: true
        standby:
          enabled: true
      ui:
        enabled: true
        serviceType: "ClusterIP"
        externalPort: 8200
